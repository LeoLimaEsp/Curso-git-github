Configuración GIT por primera vez:
git --version.
git config --global user.name "Leonel Lima".
git config --global user.email leonel.limae@hotmail.com.
git config --global user.ui true.
git config --lis: Lista de configuración de git.
#Asignación de visual estudio como editor de configuración de git.
git config --global core.editor "code --wait"
git config --global -e: configuracion directamente en visual estudio.
#Estandarizar los saltos de linea en windows.
git config --global core.autocrlf true.
#Estandarizar los saltos de linea en linux/mac.
git config --global core.autocrlf input.
#Ver todas las opciones de la configuracion en la terminal.
git config -h.
#Ver todas las opciones de la configuracion en el navegador.
git help config.
#Inicializar Git en directorio local.
mkdir Nombre de carpeta.
cd carpeta creada.
touch README.md.
touch .gitignore: Carpeta que se ignora al subir a remoto.
git init: inicializar un repositorio en git por primera vez.
code .: Abrir la carpeta creada con los ajustes desde visual estudio code.
# agregar los cambios de un archivo al staged.
git add :Archivo/directorio uno por uno.
git add .: Agregar todos los cambios de todos los archivos al staged.
# los cambios son comprometidos en el repositorio.
# debes escribir el mensaje del cambio.
# cuando se abra el archivo de configuración.
# al terminar guarda y cierra el archivo cuando se hace a traves de VSC con git commit.
# escribes y confirmas el mensaje del cambio en un sólo paso.
git commit -m "mensaje descriptivo del cambio": Para que los cambios tengan efecto, se añade mensaje siempre por consola.
# se agrega el origen remoto de tu repositorio de GitHub.
git branch -M main
git remote add origin https://github.com/usuario/repositorio.git.
# la primera vez que vinculamos el repositorio remoto con el local.
git push -u origin master.
# para las subsecuentes actualizaciones, sino cambias de rama.
git push sin la -U.
#Al inicio de trabajar es iniciar con un pull
git pull: Para descargar los cambios del repositorio remoto al local.

#Para reemplazar la rama master por main en GitHub:
# Paso 1
# Crea la rama local main y pásale el historial de la rama master
git branch -m master main: Cambio de nombre 
# Paso 2
# Haz un push de la nueva rama local main en el repositorio remoto de GitHub
git push -u origin main

# Paso 3
# Cambia el HEAD actual a la rama main
git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main

# Paso 4
# Cambia la rama default de master a main en tu repositorio de GitHub .
Settings --> En "Rama predeterminada", a la derecha del nombre de la rama predeterminada, haga clic en las flechas y ajsute la rama default.

# Paso 5
# Elimina la rama master del repositorio remoto
git push origin --delete master

#Para reemplazar la rama master por main en Git.
git config --global init.defaultBranch main

#Ayuda de comandos Git.
# ayuda en la terminal:
git (comando a buscar) -h
# ayuda en el navegador:
git help (comando a buscar).

#Ignorar archivos
# esto es un comentario

# ignorar todos los archivos que terminen en .log
*.log: dirigirse a carpeta gitignore y escribit *.(formato a ignorar).
# excepto ejemplo production.log
!production.log
# ignorar los archivos terminados en .txt dentro de la carpeta doc,
# pero no en sus subcarpetas ejemplo:
doc/*.txt
# ignorar todos los archivos terminados en .txt dentro de la carpeta doc
# y también en sus subcarpetas ejemplo:
doc/**/*.txt

Clonar repositorios:
git clone https://github.com/usuario/repositorio.git

Ramas: Una rama nos permite aislar una nueva funcionalidad en nuestro código que después podremos añadir a la versión principal.
# crear rama
git branch nombre-rama

# cambiar de rama
git checkout nombre-rama

# crear una rama y cambiarte a ella
git checkout -b rama (se arrastraran archivos de la rama donde te posicionabas anteriormente antes, por ello antes de crear dirigete a rama main)

# eliminar rama
git branch -d nombre-rama

# eliminar ramas remotas
git push origin --delete nombre-rama

#eliminar rama (forzado)
git branch -D nombre-rama

# listar todas las ramas del repositorio
git branch

# lista ramas no fusionadas a la rama actual
git branch --no-merged

# lista ramas fusionadas a la rama actual
git branch --merged

# rebasar ramas
git checkout rama-secundaria
git rebase rama-principal

# Al crear rama local y querer subirla a remoto:
git push -u origin ("nombre de la nueva rama a subir)

Fusiones:
Une dos ramas. Para hacer una fusión necesitamos:

Situarnos en la rama que se quedará con el contenido fusionado.
Fusionar.
Cuando se fusionan ramas se pueden dar 2 resultados diferentes:

Fast-Forward: La fusión se hace automática, no hay conflictos por resolver.
Manual Merge: La fusión hay que hacerla manual, para resolver conflictos de duplicación de contenido, despues de resolver se hace un add . y commit.
# nos cambiamos a la rama principal que quedará de la fusión
git checkout rama-principal

# ejecutamos el comando merge con la rama secundaria a fusionar
git merge rama-secundaria
#Esto hace las uniones con repositorio local, se debe hacer un git push -u origin main para hacer el merge en el repositorio remoto.

Cambios
Puedes agregar modificaciones al último cambio
# sin editar el mensaje del último commit
git add . y despúes: git commit --amend --no-edit

# editando el mensaje del último commit
git add . y despúes git commit --amend -m "nuevo mensaje para el último commit" (Esto cúando aún no se haya subido a repositorio remoto, si ya se subio entonces se hace
git pull, git add . y git commit -m con nuevo commit.)

# eliminar el último commit
git reset --hard HEAD~1 (Siempre y cuando no se haya aplicado un push, el 1 indica el número de commits a borrar.)

Podemos desplazarnos en el historial del repositorio hacia atrás o adelante en cambios o ramas , sin afectar el repositorio como tal, solo ver como estaba antes.
# cambiar a una rama
git checkout nombre-rama

# cambiar a un commit en particular
git checkout id-commit

#Ver historial de commits: git log ó git log --oneline

Registro del historial
git log nos permite conocer todo el historial de un proyecto, con la información de la fecha, el autor y id de cada cambio.

# muestra en una sola línea por cambio
git log --oneline

# guarda el log en la ruta y archivo que especifiquemos
git log > commits.txt

# muestra el historial con el formato que indicamos
git log --pretty=format:"%h - %an, %ar : %s" (Id, autor, fecha, nombre del commit)

# cambiamos la n por cualquier número entero y mostrará los n cambios recientes
git log -n

# muestra los cambios realizados después de la fecha especificada
git log --after="2019-07-07 00:00:00"

# muestra los cambios realizados antes de la fecha especificada
git log --before="2019-07-08 00:00:00"

# muestra los cambios realizados en el rango de fecha especificado
git log --after="2019-07-07 00:00:00" --before="2019-07-08 00:00:00"

# muestra una gráfica del historial de cambios, rama y fusiones
git log --oneline --graph --all

# muestra todo el registro de acciones del log
# incluyendo inserciones, cambios, eliminaciones, fusiones, etc.
git reflog

# diferencias entre el Working Directory y el Staging Area
git diff


Reseteo del historial
Podemos eliminar el historial de cambios del proyecto hacia adelante con respecto de un punto de referencia.

#nos muestra el listado de archivos nuevos (untracked), borrados o editados
git status

# borra HEAD
git reset --soft 

# borra HEAD y Staging (Los que enviaste con git add .)
git reset --mixed

# borra todo: HEAD, Staging y Working Directory (Los que enviaste con commit)
git reset --hard

# deshace todos los cambios después del commit indicado, preservando los cambios localmente
git reset id-commit

# desecha todo el historial y regresa al commit especificado
git reset --hard id-commit

Resetear un repositorio
#Si en algún momento tienes la necesidad de resetear el historial de cambios de un 
repositorio para que quede como si lo acabarás de crear ejecuta esta serie de comandos:
cd carpeta-repositorio
mv .git/config ~/saved_git_config
rm -rf .git
git init
git branch -M main
git add .
git commit -m "Commit inicial"
mv ~/saved_git_config .git/config
git push --force origin main

Remotos
# muestra los orígenes remotos del repositorio
git remote

# muestra los orígenes remotos con detalle
git remote -v

# agregar un orígen remoto
git remote add (nombre-orígen) https://github.com/usuario/repositorio.git

# renombrar un orígen remoto
git remote rename nombre-viejo nombre-nuevo

# eliminar un orígen remoto
git remote remove nombre-orígen

# añadir un origen remoto es 
git remote add (nombre del remoto) (url del remoto) 

#Subir cambios a remoto:
git push -u (nombre del remoto)  (nombre rama del remoto a subir)

# descargar una rama remota a local diferente a la principal
git checkout --track -b rama-remota origin/rama-remota

#Etiquetas